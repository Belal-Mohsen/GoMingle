{"ast":null,"code":"var _jsxFileName = \"/home/belal/code/Iter/code base react/src/components/ChatBot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n\n  // Add useEffect here\n  useEffect(() => {\n    // Initial bot message\n    const initialMessage = {\n      id: Date.now(),\n      text: \"How can I help you?\",\n      sender: 'bot'\n    };\n    setMessages([initialMessage]);\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  const sendMessage = async () => {\n    const userMessage = userInput.trim();\n    if (!userMessage) return;\n    const newMessage = {\n      id: Date.now(),\n      text: userMessage,\n      sender: 'user'\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setUserInput('');\n\n    // Replace 'YOUR_BACKEND_API_ENDPOINT' with your actual API endpoint\n    const response = await fetch('YOUR_BACKEND_API_ENDPOINT', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        message: userMessage\n      })\n    });\n    if (response.ok) {\n      const {\n        reply\n      } = await response.json();\n      const botMessage = {\n        id: Date.now(),\n        text: reply,\n        sender: 'bot'\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } else {\n      console.error('Failed to get a response from the API');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed bottom-5 right-5 w-96 bg-white border border-gray-300 rounded-lg overflow-hidden flex flex-col shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow overflow-auto p-3 space-y-2\",\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `text-sm ${msg.sender === 'user' ? 'text-right' : 'text-left'}`,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"inline-block bg-gray-200 rounded-full px-3 py-1\",\n          children: msg.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this)\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between border-t p-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && sendMessage(),\n        className: \"flex-grow mr-3 border rounded px-2 py-1 text-sm\",\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-4 rounded text-sm\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatBot, \"P5FDgS6nRsdP9G2rTi2DHGC8h+8=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","userInput","setUserInput","initialMessage","id","Date","now","text","sender","sendMessage","userMessage","trim","newMessage","prevMessages","response","fetch","method","headers","body","JSON","stringify","message","ok","reply","json","botMessage","console","error","className","children","map","msg","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/belal/code/Iter/code base react/src/components/ChatBot.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction ChatBot() {\n    const [messages, setMessages] = useState([]);\n    const [userInput, setUserInput] = useState('');\n\n    // Add useEffect here\n    useEffect(() => {\n        // Initial bot message\n        const initialMessage = { id: Date.now(), text: \"How can I help you?\", sender: 'bot' };\n        setMessages([initialMessage]);\n    }, []); // Empty dependency array means this effect runs once on mount\n\n    const sendMessage = async () => {\n        const userMessage = userInput.trim();\n        if (!userMessage) return;\n\n        const newMessage = { id: Date.now(), text: userMessage, sender: 'user' };\n        setMessages((prevMessages) => [...prevMessages, newMessage]);\n        setUserInput('');\n\n        // Replace 'YOUR_BACKEND_API_ENDPOINT' with your actual API endpoint\n        const response = await fetch('YOUR_BACKEND_API_ENDPOINT', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ message: userMessage }),\n        });\n\n        if (response.ok) {\n            const { reply } = await response.json();\n            const botMessage = { id: Date.now(), text: reply, sender: 'bot' };\n            setMessages((prevMessages) => [...prevMessages, botMessage]);\n        } else {\n            console.error('Failed to get a response from the API');\n        }\n    };\n\n    return (\n        <div className=\"fixed bottom-5 right-5 w-96 bg-white border border-gray-300 rounded-lg overflow-hidden flex flex-col shadow-lg\">\n            <div className=\"flex-grow overflow-auto p-3 space-y-2\">\n                {messages.map((msg) => (\n                    <div key={msg.id} className={`text-sm ${msg.sender === 'user' ? 'text-right' : 'text-left'}`}>\n                        <span className=\"inline-block bg-gray-200 rounded-full px-3 py-1\">\n                            {msg.text}\n                        </span>\n                    </div>\n                ))}\n            </div>\n            <div className=\"flex items-center justify-between border-t p-3\">\n                <input\n                    type=\"text\"\n                    value={userInput}\n                    onChange={(e) => setUserInput(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                    className=\"flex-grow mr-3 border rounded px-2 py-1 text-sm\"\n                    placeholder=\"Type your message...\"\n                />\n                <button onClick={sendMessage} className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-4 rounded text-sm\">\n                    Send\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default ChatBot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}